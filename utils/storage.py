import streamlit as st
import time
from typing import Dict, Any, List
import json

class StoryStorage:
    def __init__(self):
        self.init_session_state()
    
    def init_session_state(self):
        if "masterpieces" not in st.session_state:
            st.session_state.masterpieces = []
        if "favorites" not in st.session_state:
            st.session_state.favorites = []
        if "story_history" not in st.session_state:
            st.session_state.story_history = []
    
    def save_story(self, story: str, prompt_params: Dict[str, Any], analytics_data: Dict[str, Any]):
        story_data = {
            "id": len(st.session_state.masterpieces) + 1,
            "prompt": prompt_params.get('user_prompt', ''),
            "theme": prompt_params.get('theme', ''),
            "story": story,
            "word_count": analytics_data.get('word_count', 0),
            "settings": f"{prompt_params.get('length', '')}/{prompt_params.get('tone', '')}/{prompt_params.get('pov', '')}",
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "creativity_level": prompt_params.get('creativity_level', 0.7),
            "complexity": prompt_params.get('complexity', 'Medium')
        }
        
        st.session_state.masterpieces.append(story_data)
        st.session_state.story_history.append({
            "action": "saved",
            "story_id": story_data["id"],
            "timestamp": story_data["timestamp"]
        })
    
    def export_story(self, story: str, prompt_params: Dict[str, Any]):
        """Create downloadable formats"""
        # Text format
        export_content = f"""Title: Generated Story
Genre: {prompt_params.get('theme', 'Unknown')}
Created: {time.strftime("%Y-%m-%d %H:%M:%S")}
Settings: {prompt_params.get('length', '')}, {prompt_params.get('tone', '')}, {prompt_params.get('pov', '')}

Original Prompt:
{prompt_params.get('user_prompt', '')}

Story:
{story}

---
Generated by AI Story Generator Pro
"""
        
        st.download_button(
            label="üìÑ Download as Text",
            data=export_content,
            file_name=f"story_{int(time.time())}.txt",
            mime="text/plain"
        )
    
    def get_saved_stories(self) -> List[Dict[str, Any]]:
        return st.session_state.masterpieces
    
    def delete_story(self, story_id: int):
        st.session_state.masterpieces = [
            story for story in st.session_state.masterpieces 
            if story["id"] != story_id
        ]
        st.session_state.story_history.append({
            "action": "deleted",
            "story_id": story_id,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        })
    
    def favorite_story(self, story_id: int):
        if story_id not in st.session_state.favorites:
            st.session_state.favorites.append(story_id)
    
    def unfavorite_story(self, story_id: int):
        if story_id in st.session_state.favorites:
            st.session_state.favorites.remove(story_id)
    
    def is_favorite(self, story_id: int) -> bool:
        return story_id in st.session_state.favorites
    
    def render_saved_stories(self):
        """Render the saved stories section"""
        if not st.session_state.masterpieces:
            st.info("No saved stories yet. Create your first masterpiece!")
            return
        
        st.markdown("---")
        with st.expander(f"üìö Your Masterpieces ({len(st.session_state.masterpieces)})", expanded=False):
            
            # Filter and sort options
            col1, col2, col3 = st.columns(3)
            with col1:
                sort_by = st.selectbox("Sort by:", ["Recent", "Word Count", "Genre", "Favorites"])
            with col2:
                filter_genre = st.selectbox("Filter Genre:", ["All"] + [story["theme"] for story in st.session_state.masterpieces])
            with col3:
                show_favorites_only = st.checkbox("Favorites Only")
            
            # Apply filters
            filtered_stories = self._filter_stories(filter_genre, show_favorites_only)
            sorted_stories = self._sort_stories(filtered_stories, sort_by)
            
            # Display stories
            for i, story_data in enumerate(sorted_stories):
                self._render_story_card(story_data, i)
    
    def _filter_stories(self, filter_genre: str, show_favorites_only: bool) -> List[Dict[str, Any]]:
        stories = st.session_state.masterpieces
        
        if filter_genre != "All":
            stories = [s for s in stories if s["theme"] == filter_genre]
        
        if show_favorites_only:
            stories = [s for s in stories if self.is_favorite(s["id"])]
        
        return stories
    
    def _sort_stories(self, stories: List[Dict[str, Any]], sort_by: str) -> List[Dict[str, Any]]:
        if sort_by == "Recent":
            return sorted(stories, key=lambda x: x["timestamp"], reverse=True)
        elif sort_by == "Word Count":
            return sorted(stories, key=lambda x: x["word_count"], reverse=True)
        elif sort_by == "Genre":
            return sorted(stories, key=lambda x: x["theme"])
        elif sort_by == "Favorites":
            return sorted(stories, key=lambda x: self.is_favorite(x["id"]), reverse=True)
        return stories
    
    def _render_story_card(self, story_data: Dict[str, Any], index: int):
        with st.container():
            col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
            
            with col1:
                # Story info
                favorite_icon = "‚≠ê" if self.is_favorite(story_data["id"]) else ""
                st.markdown(f"**{favorite_icon}{story_data['theme']}** - {story_data['timestamp']}")
                st.markdown(f"*{story_data['prompt'][:80]}...*")
            
            with col2:
                st.metric("Words", story_data['word_count'])
            
            with col3:
                # Action buttons
                if st.button(f"üëÅÔ∏è Read", key=f"read_{story_data['id']}"):
                    st.markdown("### üìñ Story")
                    st.markdown(story_data['story'])
                
                if st.button(f"‚ù§Ô∏è", key=f"fav_{story_data['id']}", help="Toggle Favorite"):
                    if self.is_favorite(story_data["id"]):
                        self.unfavorite_story(story_data["id"])
                    else:
                        self.favorite_story(story_data["id"])
                    st.rerun()
            
            with col4:
                if st.button(f"üìÑ Export", key=f"export_{story_data['id']}"):
                    self.export_story(story_data['story'], story_data)
                
                if st.button(f"üóëÔ∏è Delete", key=f"delete_{story_data['id']}", help="Delete Story"):
                    self.delete_story(story_data["id"])
                    st.success("Story deleted!")
                    st.rerun()
            
            st.markdown("---")

def init_session_state():
    """Initialize all session state variables"""
    storage = StoryStorage()
    # Additional session state initialization can go here